var gfc = ee.Image("UMD/hansen/global_forest_change_2020_v1_8"),
    alwaysZeroGlass = ee.Image("users/valentinguye/always_zero_mask_glassres"),
    glass = ee.Image("users/valentinguye/GLASS-GLC_7classes_1982");



/*
Add GFC 2016-2019 data (test with already available years first?) : 30m pixel forest loss events are counted as 
deforestation if in a "never had first loss" 2015 5km cell and did not have forest loss in previous hansen years (2016, 2017, 2018). 
Once these layers built (always separately from GFC processes), aggregate to 10km by counting 
0 = less than 25%, 1 = less than 50%, 2 = less than 75%, 3 = less than 100%, 4 = 100%. 
ou l'inverse décalé à gauche ? 
Ou 0-12.5% --> 0; 12.5-37.5% --> 1; 37.5-62.5% --> 2; 62.5-87.5% --> 3; 87.5-100% --> 4. 
to convert the continuous variable computed in 2016-2020 to the 0:4 discrete count format of GLASS-GLC-derived data
*/

var palette = ['6a2325','152106'];

// DEFINE TROPICAL AOI
// requires the following order: minLng, minLat, maxLng, maxLat
var tropical_aoi = ee.Geometry.Polygon([[[-180, 30],
          [-180, -30],
          [179.9167, -30],
          [179.9167, 30], 
          [-180, 30]]], null, false); // the false passed to the geodesic argument is necessary. 
// Map.addLayer(tropical_aoi);
// Not necessary to clip (even not recommended) since we finally export to the tropical_aoi, and GEE works on "pull" basis
// var gfc = gfc.clip(tropical_aoi);

// Read in the mask computed in R script prepare_glass_glc.R
// Map.addLayer(alwaysZeroMask, {min:0, max: 1});
// Read in GFC data 
// (Both converted into an import record)

print("Hansen:", gfc);
print(gfc.projection()); 

var lossYear = gfc.select("lossyear");

// Remove the mask from lossYear
var lossYearUnmasked = lossYear.mask(ee.Image(1)); // With this, if you point inspector in the sea (e.g.) lossyear is masked
// but lossyear2 is 0 (and same logic for phtfYearLoss and phtfYearLoss2).

// THRESHOLD TO 10% AS IN GLASS-GLC DATA
// Here we want to threshold to a particular canopy closure to match the definition retained in GLASS-GLC data
// According to Liu et al. Table 1, it's Tree cover ≥ 10 %
var canopyCover10th = gfc.select(['treecover2000']).gte(ee.Number(10));//.selfMask();
// print(canopyCover10);
// Map.addLayer(canopyCover10);

var lossYear10th = lossYearUnmasked.multiply(canopyCover10th); // treecover2000 has no mask, so it does not bring back one multiplying by it
// Map.addLayer(lossyear, {}, 'lossyear');
// Map.addLayer(lossYear10th, {min: 0, max: 20}, "lossYear10");

// DISCARD PIXELS WHERE LOSS ALREADY OCCURED BEFORE 2016 ACCORDING TO GLASS DATA 
var firstLossYear = lossYear10th.multiply(alwaysZeroGlass);
// Map.addLayer(firstLossYear, {min:16, max: 20}, "firstLossYear");

// CREATE ONE BINARY IMAGE FOR EACH YEAR 
var split = function(year){
  // Prepare name
  var yearstr = ee.String(ee.Number(year).int());
  var name = ee.String("year_").cat(yearstr);
  // Make image masking pixels of loss from another year than the current year. 
  var yearMask = firstLossYear.eq(ee.Image(ee.Number(year)));
  // Use it to either mask or convert to 0 the pixels we want to discard this year. 
  // var imageMasked = phtfYearLoss.updateMask(yearMask).rename([name]);
  var imageNotMasked = firstLossYear.multiply(yearMask).rename([name]);
  // Convert the positive values to 1
  // var imageFinal = imageMasked.divide(imageMasked);
  var imageFinal = imageNotMasked.divide(ee.Image(ee.Number(year)));
  // at this stage, imageFinal has 1 where the phtf loss occurred in year, and 0 elsewhere.  
  // Convert to integer to spare some memory
  var imageFinalInt = imageFinal.toInt8();
  return imageFinalInt;
};

// Starting in 2016 since we need only those years
var years = ee.List.sequence(16,20); 
var multiBands = ee.ImageCollection(years.map(split)).toBands();
print("multiBands", multiBands);
// Necessary to rename to export to assets (can't start with a number character)
var oldNames = multiBands.bandNames();
var newNames = oldNames.map(function(nme){
  return ee.String(nme).replace(".+?(_)", "");
});
var multiBands = multiBands.rename(newNames);
print("renamed multiBands", multiBands);

var imageScale = multiBands.projection().nominalScale();
print("imageScale", imageScale);

// The steps below are probably not necessary, as GFC apparently code lossyear with the first time loss is observed.
// Do it yet, as in case some true loss gain loss sequence (eg. due to tree plantations) was coded with loss the second time. 

// First loss binary layer in 2016 is already defined based on GLASS data  
var firstLoss2016 = multiBands.select("year_16");

// DISCARD PIXELS WHERE LOSS ALREADY OCCURED BEFORE 2017 ACCORDING TO GFC DATA
var firstLoss2016Not = firstLoss2016.not();
var firstLoss2017 = multiBands.select("year_17").multiply(firstLoss2016Not);

// DISCARD PIXELS WHERE LOSS ALREADY OCCURED BEFORE 2018 ACCORDING TO GFC DATA
var firstLoss2017Not = firstLoss2017.not();
var firstLoss2018 = multiBands.select("year_18").multiply(firstLoss2016Not)
                                                .multiply(firstLoss2017Not);

// DISCARD PIXELS WHERE LOSS ALREADY OCCURED BEFORE 2019 ACCORDING TO GFC DATA
var firstLoss2018Not = firstLoss2018.not();
var firstLoss2019 = multiBands.select("year_19").multiply(firstLoss2016Not)
                                                .multiply(firstLoss2017Not)
                                                .multiply(firstLoss2018Not);

// DISCARD PIXELS WHERE LOSS ALREADY OCCURED BEFORE 2020 ACCORDING TO GFC DATA
var firstLoss2019Not = firstLoss2019.not();
var firstLoss2020 = multiBands.select("year_20").multiply(firstLoss2016Not)
                                                .multiply(firstLoss2017Not)
                                                .multiply(firstLoss2018Not)
                                                .multiply(firstLoss2019Not);

// Map.addLayer(firstLoss2016, {min: 0, max: 1}, "firstLoss2016");
// Map.addLayer(firstLoss2020, {min: 0, max: 1}, "firstLoss2020");
// Check whether this was useful or if GFC data is already first loss 
// (i.e. loss-gain-loss sequences code lossyear with the first loss year)
// var diff = firstLoss2016.subtract(multiBands.select("year_16"));
// Map.addLayer(diff, {min: -1, max: 1}, "Diff");
// It's indeed an all-grey layer: only 0, so no difference between first loss and "original" GFC 2017 data 

var lossYears20162020 = ee.Image(firstLoss2016).addBands(firstLoss2017)
                                               .addBands(firstLoss2018)
                                               .addBands(firstLoss2019)
                                               .addBands(firstLoss2020);
print(lossYears20162020);

// This is commented out since the export is now complete (takes ~4h)
// Export.image.toAsset({
//   image: lossYears20162020,
//   description: "intermediary_lossYears20162020_30",
//   assetId: "users/valentinguye/intermediary_lossYears20162020_30",
//   region: tropical_aoi,
//   scale: 27.829872698318393,  // as copy pasted from the imageScale print
//   maxPixels: 1e13, 
//   // pyramidingPolicy: {'.default': 'mean'} not necessary, default method is already mean
// });


////////////////////////////////////////////////////////
// AGGREGATE AND EXPORT   
var impImage = ee.Image("users/valentinguye/intermediary_lossYears20162020_30");
// print(impImage);

var glassProjection = glass.projection();
var transformGlass = glassProjection.transform(); 
print("glassProjection", glassProjection);  
var scaleGlass = glassProjection.nominalScale();
print("scaleGlass", scaleGlass);

for (var i=0; i<5; i++){
 // Loop over the bands of the image (i.e. over years)
  // var i = 0;
  var image = impImage.select(i);
  // print("test", image);
  // Following code is from https://developers.google.com/earth-engine/guides/resample
  // Get the image data at GAEZ scale and projection.
  var meanFirstLossGlass = image
      // Force the next reprojection to aggregate instead of resampling.
      .reduceResolution({ // Reducer input weights will be the product of the input mask and the fraction of the output pixel covered by the input pixel.
        reducer: ee.Reducer.mean(), // (see notes in TEST section about unweighted reducing, but not relevant anymore)
        maxPixels: 65536
        // bestEffort: true
      })
      .float();
      // Request the data at the scale and projection of the GLASS image. 
      // Necessary if need be to display in the Map, or proceed further computations, 
      // but NOT if next step is Export
      // .reproject({
      //   crs: glassProjection
      // }); 
      
    
  var yearStrFull = ee.String(ee.Number(years.get(i)).int().add(2000));
  // print("yearStrFull", yearStrFull); 
  var exportName = ee.String("meanFirstLossGlass_maxP_").cat(yearStrFull).getInfo();
  // print(exportName);
  
  
  
  
  

  
  
  Export.image.toDrive({
    image: meanFirstLossGlass,
    description: exportName,
    folder: "GEE_output/GLOBILUC",
    scale: 5000, // no matter what, this will be the resolution of the ouput. 
    // crsTransform: [0.04491576420597607, 0, -180.0223829375521, 0, -0.04491576420597607, 85.02554164191271],
    crs: glassProjection,
    // crs: 'EPSG:4326',
    region: tropical_aoi,
    maxPixels: 1e12
  }); 
  // And execute tasks from the Tasks Tab (worked 3 by 3, more at once may not work).   
};










/*

*/