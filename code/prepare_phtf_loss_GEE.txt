var gfc = ee.Image("UMD/hansen/global_forest_change_2020_v1_8"),
    phtf = ee.ImageCollection("UMD/GLAD/PRIMARY_HUMID_TROPICAL_FORESTS/v1"),
    gaez = ee.Image("users/valentinguye/GAEZ/Alfalfa"),
    glass = ee.Image("users/valentinguye/GLASS-GLC_7classes_1982"),
    geometry2 = 
    /* color: #00ffff */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-60.99987776251776, -7.66662293371257],
          [-60.99987776251776, -7.749296553305199],
          [-60.91679365607245, -7.749296553305199],
          [-60.91679365607245, -7.66662293371257]]], null, false),
    geometry = 
    /* color: #ff0000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-60.41622908087714, -7.667303440809743],
          [-60.41622908087714, -7.749976927509523],
          [-60.333144974431825, -7.749976927509523],
          [-60.333144974431825, -7.667303440809743]]], null, false),
    geometry4 = 
    /* color: #0000ff */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-60.915420365056825, -7.6676436939503025],
          [-60.915420365056825, -7.749636740544792],
          [-60.834052872381044, -7.749636740544792],
          [-60.834052872381044, -7.6676436939503025]]], null, false);


var palette = ['6a2325','152106'];


print("Hansen:", gfc);
print("Turubanova:", phtf);
print(gfc.projection()); 
// phtf is an ImageCollection, with a single image. Bring it to an image
var phtf = phtf.first();
print("phtf:", phtf);
print(phtf.projection());
// Map.addLayer(phtf, {min:0, max:1}, "phtf");


// DEFINE TO TROPICAL AOI
// var tropical_aoi = ee.Geometry.Rectangle([[[-180, 30],[-180, -30],[179.9167, -30],[179.9167, 30]]]);
// requires the following order: minLng, minLat, maxLng, maxLat
var tropical_aoi = ee.Geometry.Polygon([[[-180, 30],
          [-180, -30],
          [179.9167, -30],
          [179.9167, 30], 
          [-180, 30]]], null, false); // the false passed to the geodesic argument is necessary. 
// Map.addLayer(tropical_aoi);

// Not necessary to clip (even not recommended) since we finally export to the tropical_aoi, and GEE works on "pull" basis
// var gfc = gfc.clip(tropical_aoi);
// var phtf = phtf.clip(tropical_aoi);


// COUNT FOREST LOSS IN PRIMARY FOREST ONLY 
// We don't want to threshold to a particular canopy closure, as we condition on primary forest anyway. 
var lossyear = gfc.select("lossyear");

// print("lossyear", lossyear);
// var noloss = lossyear.not();
// var loss = noloss.not();
// Map.addLayer(loss, {min:0, max:1}, "loss");
// Map.addLayer(lossyear, {min:0, max:20}, "lossyear");
// Use phtf as a mask
// var phtfYearLoss = lossyear.updateMask(phtf);

// Or without masking
var lossyear2 = lossyear.mask(ee.Image(1)); // With this, if you point inspector in the sea (e.g.) lossyear is masked
// but lossyear2 is 0 (and same logic for phtfYearLoss and phtfYearLoss2). 
var phtfYearLoss2 = lossyear2.multiply(phtf);


// CREATE ONE BINARY IMAGE FOR EACH YEAR 
var split = function(year){
  // Prepare name
  var yearstr = ee.String(ee.Number(year).int());
  var name = ee.String("year_").cat(yearstr);
  // Make image masking pixels of loss from another year than the current year. 
  var yearMask = phtfYearLoss2.eq(ee.Image(ee.Number(year)));
  // Use it to either mask or convert to 0 the pixels we want to discard this year. 
  // var imageMasked = phtfYearLoss.updateMask(yearMask).rename([name]);
  var imageNotMasked = phtfYearLoss2.multiply(yearMask).rename([name]);
  // Convert the positive values to 1
  // var imageFinal = imageMasked.divide(imageMasked);
  var imageFinal = imageNotMasked.divide(ee.Image(ee.Number(year)));
  // at this stage, imageFinal has 1 where the phtf loss occurred in year, and 0 elsewhere.  
  // Convert to integer to spare some memory
  var imageFinalInt = imageFinal.toInt8();
  return imageFinalInt;
};

// Starting in 2002 since the PHTF layer is for 2001. 
var years = ee.List.sequence(2,20); 
var multiBands = ee.ImageCollection(years.map(split)).toBands();
print("multiBands", multiBands);
// Necessary to rename to export to assets (can't start with a number character)
var oldNames = multiBands.bandNames();
var newNames = oldNames.map(function(nme){
  return ee.String(nme).replace(".+?(_)", "");
});
var multiBands = multiBands.rename(newNames);
print("renamed multiBands", multiBands);

var imageScale = multiBands.projection().nominalScale();
print("imageScale", imageScale);

// This is commented out since the export is now complete (takes ~5h)
// Export.image.toAsset({
//   image: multiBands,
//   description: "intermediary_multibands_30",
//   assetId: "users/valentinguye/intermediary_multibands_30",
//   region: tropical_aoi,
//   scale: 27.829872698318393,  // as copy pasted from the imageScale print
//   maxPixels: 1e13, 
//   // pyramidingPolicy: {'.default': 'mean'} not necessary, default method is already mean
// });

  

////////////////////////////////////////////////////////
// AGGREGATE 
var impImage = ee.Image("users/valentinguye/intermediary_multibands_30");

// // With this, one can check that the split worked well
// var image = multiBands.select(6);
// var image = impImage.select(6);
// print("image", image);
// var image = ee.Image(ee.List(multiBands).get(6));
// print("test", image);
// print("phtfYearLoss",phtfYearLoss);
// Map.addLayer(phtfYearLoss, {min: 0, max: 20}, "phtfYearLoss");
// Map.addLayer(image, {}, "split");

// // Convert into hectares before aggregation 
// var phtfLostHa = image.multiply(ee.Image.pixelArea()).multiply(0.0001); // pixelArea converts in square meters, 0.0001 (1/10000) converts in hectare
// print(phtfLostHa);

// TEST ON MODIS 500m PIXELS \\
/*
// slightly larger scale image, for test
var modis = ee.Image(ee.ImageCollection('MODIS/006/MOD13A1').first())
    .select('EVI');
var modisProjection = modis.projection();
print("modisProjection", modisProjection);

var losscounttest = image
// Force the next reprojection to aggregate instead of resampling.
.reduceResolution({
  reducer: ee.Reducer.sum().unweighted(),
  maxPixels: 1024,
  // bestEffort: true
})
// Request the data at the scale and projection of the MODIS image.
.reproject({
  crs: modisProjection
});

var lossareatest = image
// Force the next reprojection to aggregate instead of resampling.
.reduceResolution({
  reducer: ee.Reducer.mean(),
  maxPixels: 1024,
  // bestEffort: true
})
.multiply(ee.Image.pixelArea()).multiply(0.0001)
// Request the data at the scale and projection of the MODIS image.
.reproject({
  crs: modisProjection
});
var lossareatest = lossareatest.float();



// Below comments are deprecated, since the input image is now computed differently (not with masks but with 0s) 
// What we learn from this test

// 1. Reducing resolution of image in area (phtfLossHa) works well. 
//Those modis grid cells where there is only one 30m pixel of primary forest loss, the area is ~769 or 27.8^2 which is coherent 
//with the actual size of GLC pixel size. 

// 2. bestEffort is less precise than maxPixels: 65k
// With bestEffort, some modis pixels can get completly masked eventhough there are unmasked pixels in them. 
// Maybe due to pyramiding policy. 

// 3. Using mean as a reducer and then multiplying to area of modis pixel does not work. 
// The mean output is 1 for all modis pixels where at least one input is not masked 
// (which kind of makes sense since we have only 1-valued pixels and masked pixels.)
// .unweighted does not change anything. 

// 4. Unweighted sum reducer is what we want. 
// If not unweighted, the aggregation count pixels valued 1 as 1*input_mask (i.e. input_mask gives the weight). 
// We feared that however, if unweighted, the aggregation would count in pixels previously masked
// (forest loss outside the tropical_aoi, outside phtf, or in another year) giving them back their 1-weight mask value. 
// But actually it does not seem to behave like this, as suggested there https://developers.google.com/earth-engine/guides/reducers_reduce_region
// "Unweighted reducers (e.g. ee.Reducer.count() or ee.Reducer.mean().unweighted()): pixels are 
// included if their centroid is in the region and the image's mask is non-zero."
// To check this, run 
Map.setCenter(-61.486416, -7.988617, 16);
// // Map.addLayer(lossyear, {min:0, max:20}, "lossyear");
// // Map.addLayer(lossyear2, {min:0, max:20}, "lossyear2");
// // Map.addLayer(phtfYearLoss, {min: 0, max: 20}, "phtfYearLoss");
// // Map.addLayer(phtfYearLoss2, {min: 0, max: 20}, "phtfYearLoss2");
Map.addLayer(image,{min:0, max:1, palette: palette}, "primary loss 30m");
Map.addLayer(losscounttest, {}, "count in modis grid");
Map.addLayer(lossareatest, {}, "area in modis grid");
// Map.addLayer(mask1, {min:0, max:1}, "mask1");
// Map.addLayer(mask2, {min:0, max:1}, "mask2");
// And see that the aggregation in the modis pixel counts only 6 pixels (don't set bestEffort to see that)
// And not the forest loss in 2008 that is not in phtf (lossyear layer)
// Checks elsewhere confirm that pixels of loss in another year are not counted either (where phtfYearLoss is visible)
// And neither are counted pixels outside of tropical_aoi. 

*/
 
/* We export to Glass projection (5km) because reducing resolution from 30m pixels to 10km GAEZ pixels requires too many 
input pixels per output pixels ((10000/30)^2 = ~111112 ) while max allowed is 65536. Aggregating in steps, i.e. first 
to GLASS and then to GAEZ does not work. 
*/

var glassProjection = glass.projection();
var gaezProjection = gaez.projection();
var transformGlass = glassProjection.transform(); 
print("glassProjection", glassProjection);  
var scaleGlass = glassProjection.nominalScale();
print("scaleGlass", scaleGlass);

// Loop over the bands of the image (i.e. over years)
for (var i=0; i<19; i++){
  // var i = 0;
  var image = impImage.select(i);
  print(image);
  // Following code is from https://developers.google.com/earth-engine/guides/resample
  // Get the image data at GAEZ scale and projection.
  var lossSumGlass = image
      // Force the next reprojection to aggregate instead of resampling.
      .reduceResolution({ // Reducer input weights will be the product of the input mask and the fraction of the output pixel covered by the input pixel.
        reducer: ee.Reducer.mean(), // (see notes in TEST section about unweighted reducing, but not relevant anymore)
        maxPixels: 65536
        // bestEffort: true
      })
      .multiply(ee.Image.pixelArea()).multiply(0.0001)
      .float();
      // Request the data at the scale and projection of the GLASS image. 
      // Necessary if need be to display in the Map, or proceed further computations, 
      // but NOT if next step is Export
      // .reproject({
      //   crs: glassProjection
      // }); 
      
  var yearStrFull = ee.String(ee.Number(years.get(i)).int().add(2000));
  var exportName = ee.String("phtfLossSumGlass_maxP_").cat(yearStrFull).getInfo();
  print(exportName);
  
  Export.image.toDrive({
    image: lossSumGlass,
    description: exportName,
    folder: "GEE_output/GLOBILUC",
    scale: 5000, // no matter what, this will be the resolution of the ouput. 
    // crsTransform: [0.04491576420597607, 0, -180.0223829375521, 0, -0.04491576420597607, 85.02554164191271],
    crs: glassProjection,
    // crs: 'EPSG:4326',
    region: tropical_aoi,
    maxPixels: 1e12
  }); 
  // And execute tasks from the Tasks Tab (worked 3 by 3, more at once may not work).   
};



// print(lossSumGlass); 
// Map.addLayer(lossSumGlass, {min:0, max:1e2}, "lossSumGlass");






// Below is old code 
/* 
  var lossSumGaez = lossSumGlass
  .reduceResolution({
      reducer: ee.Reducer.sum().unweighted(), // import to unweight here too, bc the ~4 glass-sized pixels aggregated here have weights < 1 
      // Neither bestEffort nor maxPixels change anything (makes sense since this aggregation takes only about 4 pixels per output pixel)
      // bestEffort: true
      maxPixels: 65536
    });
  // .multiply(ee.Image.pixelArea()).multiply(0.0001)
    // Request the data at the scale and projection of the GAEZ image.
    // .reproject({
    //   crs: gaezProjection
    // }); // This is not necessary to reproject here, since the Export will reproject, as long as the crs argument is provided 
      // https://developers.google.com/earth-engine/guides/best_practices#avoid-reproject
      // https://gis.stackexchange.com/questions/349358/set-reduce-resolution-method-during-export-in-earth-engine

// };

var transformGaez = gaezProjection.transform(); 
print("gaezProjection", gaezProjection);  
var scaleGaez = gaezProjection.nominalScale();
print("scaleGaez", scaleGaez);

var lossSumGaez = lossSumGaez.float();
print(lossSumGaez);




// Export.image.toDrive({
//   image: lossSumGaez,
//   description: 'phtfLossSumGaez_maxP_crsT_intermediate',
//   folder: "GEE_output/GLOBILUC",
//   crsTransform: [0.08333333333294744, 0, -180, 0, -0.08333333333301343, 29.999999999206338],
//   crs: gaezProjection,
//   // crs: 'EPSG:4326',
//   region: tropical_aoi,
//   maxPixels: 1e12
// }); 

Map.addLayer(image,{min:0, max:1, palette: palette}, "primary loss 30m");
// Map.addLayer(phtfLostHa,{min:0, max:90, palette: palette}, "primary loss area");
// // Map.addLayer(lossSum_w, {min:0, max:1e5}, "aggregated wgh");
Map.addLayer(lossSumGlass, {min:0, max:1e3, opacity: 1}, "glass aggreg");
Map.addLayer(lossSumGaez, {min:0, max:1e3, opacity: 1}, "gaez aggreg");
// Map.addLayer(mask, {min:0, max:1}, "mask");

// print(lossSum2);

// var lossSumGaez = lossSumGaez.toInt16();
// print("export proj", lossSumGaez.projection());

// print("final", lossSumGaez);
// EXPORT
// Export.image.toDrive({
//   image: lossSumGaez,
//   description: 'phtfLossSumGaez_direct_besteffort',
//   folder: "GEE_output/GLOBILUC",
//   scale: 10000, // 10km, the GAEZ resolution
//   crs: gaezProjection,
//   // crs: 'EPSG:4326',
//   region: tropical_aoi,
//   // maxPixels: 1e10
// }); 



// Try without .unweighted. It makes the sums all equal 0, don't know why...
/*  
var lossSum_w = image
  // Force the next reprojection to aggregate instead of resampling.
  .reduceResolution({
    reducer: ee.Reducer.sum(),
    maxPixels: 65536
    // bestEffort: true
  })
  // Request the data at the scale and projection of the GLASS image.
  .reproject({
    crs: glassProjection
  });
// Map.addLayer(lossSum_w, {min:0, max:1e5}, "weighted");

*/


